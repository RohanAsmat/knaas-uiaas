[{"id":"c0046930.a32018","type":"inject","z":"5842a5b0.0199ec","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":99.5,"y":134.5,"wires":[["4106f5b7.3176cc","550dede0.18cc74","fb4a81c1.4a716"]]},{"id":"dbe5ab24.784a78","type":"debug","z":"5842a5b0.0199ec","name":"","active":false,"console":"false","complete":"false","x":1169.5,"y":20,"wires":[]},{"id":"fb4a81c1.4a716","type":"omiNodeV9","z":"5842a5b0.0199ec","name":"Road Issues","path_InfoItem":"http://biotope-o-mi.irisnetlab.be/Objects/sas-issue","token":"","operations":"Read","ttl":"-1","interval":"","callback":"","newest":"","oldest":"","begin":"","end":"","value":"","reqID":"","metadata":true,"readTypes":"read1time","x":249.5,"y":517,"wires":[["66d6bce6.9528d4"]]},{"id":"4106f5b7.3176cc","type":"omiNodeV9","z":"5842a5b0.0199ec","name":"Transport Statistics","path_InfoItem":"http://biotope-o-mi.irisnetlab.be/Objects/sas-statistics","token":"","operations":"Read","ttl":"-1","interval":"","callback":"","newest":"","oldest":"","begin":"","end":"","value":"","reqID":"","metadata":true,"readTypes":"read1time","x":285,"y":84,"wires":[["c093f550.fb5d58"]]},{"id":"550dede0.18cc74","type":"omiNodeV9","z":"5842a5b0.0199ec","name":"Co-Mobility Routes","path_InfoItem":"http://biotope-o-mi.irisnetlab.be/Objects/sas-comobility","token":"","operations":"Read","ttl":"-1","interval":"","callback":"","newest":"5","oldest":"","begin":"","end":"","value":"","reqID":"","metadata":true,"readTypes":"read1time","x":283,"y":179,"wires":[["bb60fc5e.c2ba2"]]},{"id":"c093f550.fb5d58","type":"xml","z":"5842a5b0.0199ec","name":"Lyon O-DF Structure to JSON","attr":"","chr":"","x":530,"y":44,"wires":[["f6938b92.4eb008"]]},{"id":"bb60fc5e.c2ba2","type":"xml","z":"5842a5b0.0199ec","name":"Lyon O-DF Structure to JSON","attr":"","chr":"","x":533,"y":177,"wires":[["4b6f32f4.d13d6c"]]},{"id":"66d6bce6.9528d4","type":"xml","z":"5842a5b0.0199ec","name":"Lyon O-DF Structure to JSON","attr":"","chr":"","x":492,"y":516,"wires":[["cbb3db7.988b728"]]},{"id":"f6938b92.4eb008","type":"python3-function","z":"5842a5b0.0199ec","name":"Extract Transport Response","func":"response = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\nchartValue = [] ;\nchartValue.append({'labels': [] , 'series': ['Series A', 'Series B', 'Series C'], 'data': [[]] });\n\n\nif response == \"200\":\n    node.log(\"Extract Response O-MI Node: Success in reading O-MI node content of Trasnport Statistics\")\n    \n    #Object with the values for Info Item \n    objectValue = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0][\"Object\"][0];\n\n    if objectValue[\"id\"][0] == \"transport-mode\":\n        \n        #parsing through the Object with Statistics value\n        for items in objectValue[\"InfoItem\"]:\n            chartValue[0]['labels'].append(items[\"$\"][\"name\"]);  \n            chartValue[0]['data'][0].append(items[\"value\"][0]['_']);            \n\n\nelse:\n    node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents of Trasnport Statistics\")\n\nmsg[\"payload\"] = chartValue ;\nreturn msg","outputs":1,"x":530,"y":110,"wires":[["b925dc34.e56f8"]]},{"id":"4b6f32f4.d13d6c","type":"python3-function","z":"5842a5b0.0199ec","name":"Extract Co-Mobility Routes","func":"import random\n\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\ncoMobility  = [];\ncoMobilityMarkers = [];\nitemNames = [];\ncoords = [];\n\ndef geoCoordinates( infoItem, activity ):\n    cood = {} ;\n    lat = lon = 0.0 ;\n\n    if activity != 'currentList':\n        for geo in infoItem:\n            if geo[\"$\"][\"name\"] == \"latitude\":\n                cood['latitude'] = lat = geo[\"value\"][0][\"_\"];\n            elif geo[\"$\"][\"name\"] == \"longitude\":\n                cood['longitude'] = lon = geo[\"value\"][0][\"_\"];\n            else:\n                node.log(\"No match found\");\n            \n        if (lat == 0 and lon == 0):\n            cood = None ;\n    else:\n        for geo in infoItem:\n            if geo[\"$\"][\"name\"] == \"latitude\":\n                lato = [];\n                geo['value'].sort(key=lambda x:x['$']['dateTime'])\n                for lati in geo['value']:\n                    lato.append(lati['_']);\n                    \n                cood['latitude'] = lat = lato ;\n                \n            elif geo[\"$\"][\"name\"] == \"longitude\":\n                longo = [];\n                geo['value'].sort(key=lambda x:x['$']['dateTime'])\n                for longi in geo['value']:\n                    longo.append(longi['_']);\n                \n                cood['longitude'] = lon = longo;\n            else:\n                node.log(\"No match found\");\n            \n        if (lat == None and lon == None):\n            cood = None ;\n        \n    node.log(cood);        \n    return cood;\n    \n    \nif response == \"200\":\n    node.log(\"Extract Response O-MI Node: Success in reading O-MI node content of Co-Mobility Routes\")\n     \n    #Object Values for Road Issues\n    objectValue = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0];\n    coord4Current = [];\n    coord4Current2 = [];\n\n\n    for items in objectValue['Object']:\n        coord1 = coord2 = coord3 = { 'latitude': 0.0, 'longitude': 0.0 } ;\n        transportMode = itemId = numberOfChildren = icon = \"\" ;\n        \n        itemId = items['id'][0] ;\n    \n        #iterating over the infoItems:\n        for iterator in items['InfoItem']:\n            icon = '';\n            if iterator[\"$\"][\"name\"] == \"numberOfChildren\":\n                numberOfChildren = iterator[\"value\"][0][\"_\"];\n            elif iterator[\"$\"][\"name\"] == \"transportMode\":\n                transportMode =  iterator[\"value\"][0][\"_\"];\n                if transportMode.lower() == \"walking\":\n                    icon = \"fa-male\";\n                elif transportMode.lower() == \"driving\":\n                    icon = \"car\";\n                elif transportMode.lower() == \"bicycling\":\n                    icon = \"fa-bicycle\";\n                elif transportMode.lower() == \"transit\":\n                    icon = \"fa-crosshairs\";\n                else :\n                    icon = \"fa-map-marker\";\n        \n        #iterating over the start and end points\n        for geo in items['Object']:\n            cordtemp = {};\n            color = \"\";\n            activity = \"\";\n            \n            if geo['id'][0] == \"current\":\n                activity = \"current\";\n                coord1 = geoCoordinates(geo['InfoItem'], activity);\n                coord4Current = geoCoordinates(geo['InfoItem'], 'currentList');\n                coord4Current2.append(geo['InfoItem'])  ;\n                cordtemp = coord1 ;\n                color = 'green' \n            elif geo['id'][0] == \"end\":\n                activity = \"end\";\n                coord2 = geoCoordinates(geo['InfoItem'], activity);\n                cordtemp = coord2 ;\n                color = 'black' ;\n            elif geo['id'][0] == \"start\":\n                activity = \"start\";\n                coord3 = geoCoordinates(geo['InfoItem'], activity);\n                cordtemp = coord3 ;\n                color = 'black' ;\n            \n            #if( itemId != '121072' and itemId != '121109' and itemId != '121852' and itemId != '120982' and itemId != '121238' and itemId != '120985' ):\n            coMobilityMarkers.append({ 'name': itemId+activity, 'activity': activity  , 'lon': float(cordtemp['longitude']) , 'lat': float(cordtemp['latitude']), 'icon': 'fa-map-marker', 'iconColor': color, 'numberOfChildren': numberOfChildren, 'transportMode': transportMode, \"layer\":\"OSMhot\" });\n            itemNames.append({'name': itemId + \" \" + activity, 'children': numberOfChildren});\n            coords.append( [float(cordtemp['latitude']) , float(cordtemp['longitude'])]  );\n            \n        coMobility.append({ 'name': itemId , 'line': [] , 'color': \"#{:06x}\".format(random.randint(0, 0xFFFFFF)) ,  \"layer\":\"OSMhot\" });\n        #append coordinates for drawing line:\n         \n        #coMobility[-1]['line'].append([ float(coord3['latitude']), float(coord3['longitude'])]);\n        #node.log(coMobility[-1]['line'][-1]);\n        length = len(coMobility) -1 ;\n        \n        if coord3 != None and coord3['latitude'] != 0.0 and coord3['longitude'] != 0.0 :\n            coMobility[length]['line'].append([ float(coord3['latitude']), float(coord3['longitude'])]) ;\n            coords.append([ float(coord3['latitude']), float(coord3['longitude'])]);\n        \n        if coord1 != None and coord1['latitude'] != 0.0 and coord1['longitude'] != 0.0:\n            coMobility[length]['line'].append([ coord4Current['latitude'] , coord4Current['longitude'] ]) ;\n            for coordinate, coordinate2 in zip( coord4Current['latitude'], coord4Current['longitude'] ):\n                coords.append([float(coordinate), float(coordinate2)])\n        \n        if coord2 != None and coord2['latitude'] != 0.0 and coord2['longitude'] != 0.0:\n            coMobility[length]['line'].append([ float(coord2['latitude']) , float(coord2['longitude'])]) ;\n            coords.append([ float(coord2['latitude']), float(coord2['longitude'])]);\n\n        \nelse:\n     node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents of Co-Mobility Routes\")\n\n#msg['ids'] = list(set(itemNames));\nmsg['ids'] = itemNames;\nmsg['markers'] = coMobilityMarkers;\nmsg['lines'] = coMobility;\nmsg['current'] = coord4Current ;\nmsg['coordinates'] = coords ;\nreturn msg","outputs":1,"x":813,"y":177,"wires":[["dbe5ab24.784a78","457bc941.1a7e08","cfa2e5a6.aae6c8","de105ea6.388c","391debaf.9861d4","787f20db.31fa5"]]},{"id":"cbb3db7.988b728","type":"python3-function","z":"5842a5b0.0199ec","name":"Extract Road Issues","func":"response = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\n\nroadIssues = [];\nitemNames = [];\ncoordinates = [];\n\nif response == \"200\":\n    node.log(\"Extract Response O-MI Node: Success in reading O-MI node content of Road Issues\")\n     \n    #Object Values for Road Issues\n    objectValue = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0];\n    \n    for items in objectValue['Object']:\n        itemid = longitude = latitude = category = active = transportMode = itemType = icon = \"\" ;\n        itemid = items['id'][0] ;\n        \n        if items['Object'][0]['id'][0] == \"geo\":\n            for geo in items['Object'][0]['InfoItem']:\n                if geo[\"$\"][\"name\"] == \"latitude\":\n                    latitude = geo[\"value\"][0][\"_\"];\n                elif geo[\"$\"][\"name\"] == \"longitude\":\n                    longitude = geo[\"value\"][0][\"_\"];\n                else:\n                    node.log(\"No match found\");\n            \n        for iterator in items['InfoItem']:\n            if iterator[\"$\"][\"name\"] == \"category\":\n                category = iterator[\"value\"][0][\"_\"];\n            elif iterator[\"$\"][\"name\"] == \"active\":\n                active =  iterator[\"value\"][0][\"_\"];\n            elif iterator[\"$\"][\"name\"] == \"transportMode\":\n                transportMode =  iterator[\"value\"][0][\"_\"];\n                if transportMode.lower() == \"walking\":\n                    icon = \"fa-male\";\n                elif transportMode.lower() == \"driving\":\n                    icon = \"car\";\n                elif transportMode.lower() == \"bicycling\":\n                    icon = \"fa-bicycle\";\n                elif transportMode.lower() == \"transit\":\n                    icon = \"fa-crosshairs\";\n                else :\n                    icon = \"fa-map-marker\";\n            elif iterator[\"$\"][\"name\"] == \"type\":\n                itemType =  iterator[\"value\"][0][\"_\"];\n\n        if active.lower() != \"false\":        \n            roadIssues.append({ \"issue\":itemType , \"lat\": float(latitude), \"lon\": float(longitude), \"category\": category, \"active\": active, \"transportMode\": transportMode, \"name\": str(itemid), \"layer\":\"OSMhot\", \"icon\": icon });\n            itemNames.append({ \"issue\":itemType , \"name\": str(itemid), });\n            coordinates.append([float(latitude), float(longitude)]);\n\nelse:\n     node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents of Road Issues\")\n\nmsg[\"coordinates\"]=coordinates;\nmsg[\"issues\"] = itemNames ;\nmsg[\"payload\"] = roadIssues ;\nreturn msg","outputs":1,"x":750,"y":573,"wires":[["40508d72.2014d4","7418cbeb.a581b4","d4f88a85.ab74d8"]]},{"id":"b925dc34.e56f8","type":"ui_chart","z":"5842a5b0.0199ec","name":"Transport Type Chart","group":"bca5f4b5.c0ae78","order":0,"width":0,"height":0,"label":"chart","chartType":"pie","legend":"true","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"x":773.5,"y":73,"wires":[[],[]]},{"id":"cfa994c0.e55108","type":"function","z":"5842a5b0.0199ec","name":"move and zoom","func":"msg.payload = { command:{ layer:\"Nat Geo\",lat:msg.payload[0] , lon:msg.payload[1] ,zoom:12 } };\nreturn msg;","outputs":1,"noerr":0,"x":1622,"y":580,"wires":[["40508d72.2014d4"]]},{"id":"b97e553c.d632d8","type":"inject","z":"5842a5b0.0199ec","name":"Inject This First","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":false,"x":1384,"y":580,"wires":[["cfa994c0.e55108"]]},{"id":"457bc941.1a7e08","type":"ui_template","z":"5842a5b0.0199ec","group":"27b2c37b.4318bc","name":"WorldMap","order":1,"width":"26","height":"12","format":"<iframe src=\"http://127.0.0.1:1880/worldmap/\" height=\"658\" width=\"1482\">\n <p>Your browser does not support iframes.</p>\n</iframe>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":1154,"y":272,"wires":[[]]},{"id":"40508d72.2014d4","type":"worldmap","z":"5842a5b0.0199ec","name":"","lat":"","lon":"","zoom":"","layer":"","cluster":"","maxage":"","usermenu":"show","layers":"show","panit":"false","x":1804.5,"y":479.5,"wires":[]},{"id":"cfa2e5a6.aae6c8","type":"python3-function","z":"5842a5b0.0199ec","name":"splitMarkers","func":"\nmsg['payload'] = msg['markers'];\nreturn msg","outputs":1,"x":1154.5,"y":197.5,"wires":[["40508d72.2014d4"]]},{"id":"de105ea6.388c","type":"python3-function","z":"5842a5b0.0199ec","name":"splitLines","func":"\nmsg['payload'] = msg['lines'];\nreturn msg","outputs":1,"x":1142.5,"y":81.5,"wires":[["d32cfb8f.3333f8"]]},{"id":"d32cfb8f.3333f8","type":"split","z":"5842a5b0.0199ec","name":"Split Dictionary Items","splt":"\\n","x":1185.5,"y":131.5,"wires":[["a26e4a44.750dc8"]]},{"id":"69b0cc26.f16b94","type":"worldmap-tracks","z":"5842a5b0.0199ec","depth":"100","name":"","x":1735.5,"y":226,"wires":[["40508d72.2014d4"]]},{"id":"72154d62.02cc04","type":"split","z":"5842a5b0.0199ec","name":"Split Array Coordinates","splt":"\\n","x":1426,"y":137,"wires":[["69b0cc26.f16b94"]]},{"id":"a26e4a44.750dc8","type":"function","z":"5842a5b0.0199ec","name":"Checking for Empty Coordinates","func":"\nvar len = msg.payload.line.length ;\nvar name = msg.payload.name;\nvar color = msg.payload.color;\nvar current = [];\n/**\nfunction currentPointArray( currentArray )\n{\n    latitudeLength = currentArray[0].length ;\n    longitudeLength = currentArray[1].length ;\n    \n    for( var i = 0 ; i < currentArray[0].length ; i++ )\n    {\n        //if currentArray[0][i];\n        \n        for( var k = 0 ; k < currentArray[1].length ; k++ )\n        {\n            \n        }\n    }\n}\n**/\n\nif (  len - 3 === 0  || len -2 === 0 || len - 1 === 0 )\n    start = { lat:parseFloat(msg.payload.line[0][0]), lon:parseFloat(msg.payload.line[0][1]), name:name, color: color }  ;\n\nif ( len - 2 === 1 && len - 1 === 2 )\n    //for (var items in msg.payload.line[1][0])\n    //current = currentPointArray( msg.payload.line[1] ); \n    for( var i = 0 ; i <  msg.payload.line[1][0].length ; i++ )\n    {\n        current.push({ lat: parseFloat(msg.payload.line[1][0][i]), lon: parseFloat(msg.payload.line[1][1][i]), name:name, color: color  });\n    }\n    \n    \nif(len - 1 === 1 )\n    end = { lat: parseFloat(msg.payload.line[1][0]), lon: parseFloat(msg.payload.line[1][1]) , name:name, color: color } ;\n\n    //current = { lat: msg.payload.line[1][0], lon:msg.payload.line[1][1], name:name, color: color  }  ;\n\nif ( len - 1 === 2  )\n    end = { lat: parseFloat(msg.payload.line[2][0]), lon: parseFloat(msg.payload.line[2][1]) , name:name, color: color } ;\n    \nmsg.payload = {};\n\nmsg.payload.start = start ;\nmsg.payload.current = current ;\nmsg.payload.end = end ;\n\nreturn msg;","outputs":1,"noerr":0,"x":1380,"y":83,"wires":[["72154d62.02cc04","85ad0904.3d4e48","f2aaa986.318628"]]},{"id":"391debaf.9861d4","type":"python3-function","z":"5842a5b0.0199ec","name":"splitCurrentCoords","func":"\nmsg['payload'] = msg['ids'];\nreturn msg","outputs":1,"x":1168,"y":398,"wires":[["fdf3ee25.ada43"]]},{"id":"85ad0904.3d4e48","type":"python3-function","z":"5842a5b0.0199ec","name":"currentCoords","func":"\nmsg['payload'] = msg['payload']['current'];\nreturn msg","outputs":1,"x":1646,"y":85,"wires":[["f5bff246.4cc76"]]},{"id":"f5bff246.4cc76","type":"split","z":"5842a5b0.0199ec","name":"","splt":"\\n","x":1642.5,"y":139,"wires":[["69b0cc26.f16b94"]]},{"id":"e1886bc.ddcf798","type":"split","z":"5842a5b0.0199ec","name":"","splt":"\\n","x":1813.5,"y":29,"wires":[["69b0cc26.f16b94"]]},{"id":"f2aaa986.318628","type":"function","z":"5842a5b0.0199ec","name":"Start&EndPoints","func":"\nmsg.payload.start = msg.payload['start'];\nmsg.payload.end = msg.payload['end'];\n\nreturn msg;","outputs":1,"noerr":0,"x":1650.5,"y":30,"wires":[["e1886bc.ddcf798"]]},{"id":"fdf3ee25.ada43","type":"ui_template","z":"5842a5b0.0199ec","group":"139dd5da.a9029a","name":"Co-Mobility Route Nodes","order":0,"width":"6","height":"20","format":"<style>\ntable {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n}\ntd {\n    background: #FAFAFA;\n    text-align: center;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */\n</style>\n<style>\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.4.1/css/all.css\" integrity=\"sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz\" crossorigin=\"anonymous\">\n</style>\n\n<script>\n\n(function() {\n    \n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n             // Do something when msg arrives\n             scope.node = {\n              name : '',\n             };\n            }\n    \n        });\n     \n    })(scope);\n    \n})();\n</script>\n\n\n<form name=\"myForm\" >\n<h5>Selected Node: {{node.name}}</h5>\n<table>\n<thead>\n  <tr>\n    <th></th>\n    <th>Node Position</th>\n    <th>Children</th>        \n  </tr>\n</thead>\n  <tr ng-repeat=\"obj in msg.payload track by $index\">\n    <td>\n    <input type=\"radio\" ng-model=\"node.name\" value=\"{{obj.name}}\"  name=\"data\"  ng-change=\"send({payload:node.name})\"></td>\n    <td>{{ obj.name }}</td>\n    <td>{{ obj.children }}</td>\n  </tr>\n</table>\n </form>\n\n\n\n","storeOutMessages":false,"fwdInMessages":true,"templateScope":"local","x":1191,"y":323,"wires":[["943aaa09.88d6a8"]]},{"id":"943aaa09.88d6a8","type":"function","z":"5842a5b0.0199ec","name":"searchCoMobilityRoutes","func":"\nif(typeof msg.payload == \"string\")\n{\n    msg.payload = msg.payload.replace(/\\s/g, \"\").replace(\"start\", \"\").replace(\"end\", \"\").replace(\"current\", \"\");\n    msg.payload = { command:{search:msg.payload} };\n\n}else\n{\n    msg.payload = \"\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1438,"y":322,"wires":[["40508d72.2014d4"]]},{"id":"7418cbeb.a581b4","type":"python3-function","z":"5842a5b0.0199ec","name":"splitLines","func":"\nmsg['payload'] = msg['issues'];\nreturn msg","outputs":1,"x":974,"y":572,"wires":[["d31cfeb6.2bc3c"]]},{"id":"184575a5.79fdea","type":"function","z":"5842a5b0.0199ec","name":"searchRoadIssues","func":"\nif(typeof msg.payload == \"string\")\n{\n    msg.payload = msg.payload;\n    msg.payload = { command:{search:msg.payload} };\n\n}else\n{\n    msg.payload = \"\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1388,"y":463,"wires":[["40508d72.2014d4"]]},{"id":"d31cfeb6.2bc3c","type":"ui_template","z":"5842a5b0.0199ec","group":"fba75bb6.570bb8","name":"Road Issues","order":1,"width":"14","height":"7","format":"<style>\ntable {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n}\ntd {\n    background: #FAFAFA;\n    text-align: center;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */\n</style>\n<style>\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.4.1/css/all.css\" integrity=\"sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz\" crossorigin=\"anonymous\">\n</style>\n\n<script>\n\n(function() {\n    \n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n             // Do something when msg arrives\n             scope.node = {\n              name : '',\n             };\n            }\n    \n        });\n     \n    })(scope);\n    \n})();\n</script>\n\n\n<form name=\"myForm\" >\n<h5>Selected Node: {{node.name}}</h5>\n<table>\n<thead>\n  <tr>\n    <th></th>\n    <th>Node Position</th>\n    <th>Children</th>        \n  </tr>\n</thead>\n  <tr ng-repeat=\"obj in msg.payload track by $index\">\n    <td>\n    <input type=\"radio\" ng-model=\"node.name\" value=\"{{obj.name}}\"  name=\"data\"  ng-change=\"send({payload:node.name})\"></td>\n    <td>{{ obj.name }}</td>\n    <td>{{ obj.issue }}</td>\n  </tr>\n</table>\n </form>\n\n\n\n","storeOutMessages":false,"fwdInMessages":true,"templateScope":"local","x":1146.5,"y":461,"wires":[["184575a5.79fdea"]]},{"id":"13257272.f666ce","type":"function","z":"5842a5b0.0199ec","name":"calculatingCenter","func":"//function from:\n//https://stackoverflow.com/questions/6671183/calculate-the-center-point-of-multiple-latitude-longitude-coordinate-pairs\n\nfunction rad2degr(rad) { return rad * 180 / Math.PI; }\nfunction degr2rad(degr) { return degr * Math.PI / 180; }\n\n/**\n * @param latLngInDeg array of arrays with latitude and longtitude\n *   pairs in degrees. e.g. [[latitude1, longtitude1], [latitude2\n *   [longtitude2] ...]\n *\n * @return array with the center latitude longtitude pairs in \n *   degrees.\n */\nfunction getLatLngCenter(latLngInDegr) {\n    var LATIDX = 0;\n    var LNGIDX = 1;\n    var sumX = 0;\n    var sumY = 0;\n    var sumZ = 0;\n\n    for (var i=0; i<latLngInDegr.length; i++) {\n        var lat = degr2rad(latLngInDegr[i][LATIDX]);\n        var lng = degr2rad(latLngInDegr[i][LNGIDX]);\n        // sum of cartesian coordinates\n        sumX += Math.cos(lat) * Math.cos(lng);\n        sumY += Math.cos(lat) * Math.sin(lng);\n        sumZ += Math.sin(lat);\n    }\n\n    var avgX = sumX / latLngInDegr.length;\n    var avgY = sumY / latLngInDegr.length;\n    var avgZ = sumZ / latLngInDegr.length;\n\n    // convert average x, y, z coordinate to latitude and longtitude\n    var lng = Math.atan2(avgY, avgX);\n    var hyp = Math.sqrt(avgX * avgX + avgY * avgY);\n    var lat = Math.atan2(avgZ, hyp);\n\n    return ([rad2degr(lat), rad2degr(lng)]);\n}\n\ncoord = getLatLngCenter(msg['payload']);\n\nmsg['payload']= coord;\n\nreturn msg;","outputs":1,"noerr":0,"x":1368,"y":640,"wires":[["cfa994c0.e55108"]]},{"id":"d4f88a85.ab74d8","type":"function","z":"5842a5b0.0199ec","name":"CoordinateForMapCenterInput","func":"\nmsg['payload'] = msg['coordinates'];\n\nreturn msg;","outputs":1,"noerr":0,"x":747,"y":636,"wires":[["f6c53d63.1b751"]]},{"id":"787f20db.31fa5","type":"python3-function","z":"5842a5b0.0199ec","name":"splitCurrentCoords","func":"\nmsg['payload'] = msg['coordinates'];\n#msg['complete'] = True;\n\nreturn msg","outputs":1,"x":766,"y":461,"wires":[["f6c53d63.1b751"]]},{"id":"f6c53d63.1b751","type":"join","z":"5842a5b0.0199ec","name":"","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","timeout":"","count":"2","x":1014.5,"y":708,"wires":[["35771b1e.c9ce04"]]},{"id":"35771b1e.c9ce04","type":"python3-function","z":"5842a5b0.0199ec","name":"MergingCoordinateArrays","func":"\narrayOne = msg['payload'][0];\narrayTwo = msg['payload'][1];\n\n\nmsg['payload'] = arrayOne + arrayOne  ;\n\nreturn msg","outputs":1,"x":1207.5,"y":710,"wires":[["13257272.f666ce","d372ba5e.8e70a8"]]},{"id":"d372ba5e.8e70a8","type":"debug","z":"5842a5b0.0199ec","name":"","active":true,"console":"false","complete":"false","x":1491,"y":709,"wires":[]},{"id":"bca5f4b5.c0ae78","type":"ui_group","z":"","name":"Trasnport Types","tab":"57f678e0.027b78","order":1,"disp":true,"width":"12","collapse":false},{"id":"27b2c37b.4318bc","type":"ui_group","z":"","name":"Brussels Co-Mobility Issues","tab":"57f678e0.027b78","order":3,"disp":true,"width":"26","collapse":false},{"id":"139dd5da.a9029a","type":"ui_group","z":"","name":"Co-Mobility Route Nodes ","tab":"57f678e0.027b78","order":4,"disp":true,"width":"6","collapse":false},{"id":"fba75bb6.570bb8","type":"ui_group","z":"","name":"Road Issues","tab":"57f678e0.027b78","order":2,"disp":true,"width":"14","collapse":false},{"id":"57f678e0.027b78","type":"ui_tab","z":"","name":"Transport Mode","icon":"dashboard","order":3}]
