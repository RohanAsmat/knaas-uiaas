[
    {
        "id": "920228e3.9f3908",
        "type": "tab",
        "label": "5_Lyon_Heat_Wave_UIaaS"
    },
    {
        "id": "e7188be0.d86ec8",
        "type": "ui_template",
        "z": "920228e3.9f3908",
        "group": "e315b98.67035c8",
        "name": "WorldMap",
        "order": 2,
        "width": "56",
        "height": "34",
        "format": "<iframe src=\"http://127.0.0.1:1880/worldmap/\" height=\"658\" width=\"1482\">\n <p>Your browser does not support iframes.</p>\n</iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1447.88330078125,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "dac634a.683c6c8",
        "type": "omiNodeV9",
        "z": "920228e3.9f3908",
        "name": "Read O-MI Node Lyon Heat Wave Mitigation",
        "path_InfoItem": "https://biotope-omi.alpha.grandlyon.com/Objects/Organization:Metropole-de-Lyon:v1-0-0",
        "token": "",
        "operations": "Read",
        "ttl": "40",
        "interval": "",
        "callback": "",
        "newest": "",
        "oldest": "",
        "begin": "",
        "end": "",
        "value": "",
        "reqID": "",
        "metadata": true,
        "readTypes": "read1time",
        "x": 513.8833312988281,
        "y": 225.88333129882812,
        "wires": [
            [
                "a9c8acc3.e46d9"
            ]
        ]
    },
    {
        "id": "13b0cb41.4f805d",
        "type": "debug",
        "z": "920228e3.9f3908",
        "name": "OutputOMINodeLyon",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1397.88330078125,
        "y": 47.88330078125,
        "wires": []
    },
    {
        "id": "a9c8acc3.e46d9",
        "type": "xml",
        "z": "920228e3.9f3908",
        "name": "Lyon O-DF Structure to JSON",
        "attr": "",
        "chr": "",
        "x": 839.88330078125,
        "y": 176.88330078125,
        "wires": [
            [
                "cfc39b1e.a410f",
                "ec1bbaa6.8cdf8"
            ]
        ]
    },
    {
        "id": "f5f9ac53.2bfbc8",
        "type": "inject",
        "z": "920228e3.9f3908",
        "name": "Execute UIaaS Request Morning",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "x": 172,
        "y": 187.88333129882812,
        "wires": [
            [
                "dac634a.683c6c8",
                "26f4bffe.877578"
            ]
        ]
    },
    {
        "id": "ec1bbaa6.8cdf8",
        "type": "python3-function",
        "z": "920228e3.9f3908",
        "name": "Extract Response O-MI Node Lyon HW",
        "func": "import time\nfrom bson import json_util, ObjectId\nfrom datetime import datetime, timedelta\n\n#taking response value \n#Note in response first is longitude --> 0 and latitude -->1\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\n\nnodeName = \"Lyon\"\nlstForGeo = []\nparsedGeoAndCorrespondingTemp = []\nlstForPOI = []\ntempList = []\n\nif response == \"200\":\n node.log(\"Extract Response O-MI Node: Success in reading O-MI Node Contents\")\n \n #getting the array of Objects with the Parking Facilities Data from Lyon\n lyonHeatWaveInfoItem = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0]\n organizationID = lyonHeatWaveInfoItem[\"id\"][0]\n \n for items in lyonHeatWaveInfoItem[\"Object\"]:\n    tempid = items[\"id\"][0]\n    if tempid == \"OrganizationalUnit:DINSI\":\n        templist = items[\"Object\"]\n        for objs in templist:\n            tempid2 = objs[\"id\"][0]\n            if tempid2 == \"Deployment:Sensing-Labs-IP68-Outdoor-Temperature-Sensor:I\" :\n                lstForPOI = lstForPOI + objs[\"Object\"]\n            elif tempid2 == \"Deployment:Sensing-Labs-IP68-Outdoor-Temperature-Sensor:II\" :\n                lstForPOI = lstForPOI + objs[\"Object\"]\n\n #getting the Geo Coordinates ....\n for geoloc in lstForPOI:\n    infoItem = geoloc[\"InfoItem\"]\n    ids = geoloc[\"id\"][0]\n    date = time.strftime(\"%Y/%m/%d\")\n    #date =  datetime.now()\n    dayPart = time.strftime(\"%X\")\n    if dayPart[:2] == \"19\":\n        dayPart = \"night\"\n    elif dayPart[:2] == \"08\":\n        dayPart = \"morning\"\n        \n    if ids[:6] == \"Sensor\": \n        objectItem = geoloc[\"Object\"]\n        longitude = 0\n        latitude = 0\n        resultTemp = 0\n    \n        #geo Coordinates get\n        for item in infoItem:\n            if item[\"$\"][\"name\"] == \"geo:long\":\n                longitude = item[\"value\"][0][\"_\"]\n            elif item[\"$\"][\"name\"] == \"geo:lat\":\n                latitude = item[\"value\"][0][\"_\"]\n     \n        #tempResult get\n        for items in objectItem:\n            if items[\"$\"][\"type\"] == \"sosa:Observation\":\n                resultTemp = items[\"InfoItem\"][0][\"value\"][0][\"_\"]\n        lstForGeo.append({\"geo\":[longitude, latitude], \"temp\":resultTemp, \"date\":date, \"time\":dayPart})\n        parsedGeoAndCorrespondingTemp.append({ \"_id\":str(ObjectId()), \"lon\":float(longitude), \"lat\":float(latitude), \"temprature\":resultTemp, \"date\":date, \"name\":ids, \"layer\":\"heatWave\"})\nelse:\n node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents\")\n\nmsg[\"payload\"] = parsedGeoAndCorrespondingTemp\nreturn msg",
        "outputs": 1,
        "x": 861.61669921875,
        "y": 261.88330078125,
        "wires": [
            [
                "e7188be0.d86ec8",
                "fe3269e3.8c6e3",
                "3ba5c3b7.cc501c",
                "cfc39b1e.a410f",
                "23f3d1b9.826816"
            ]
        ]
    },
    {
        "id": "9f6b4b55.0590b8",
        "type": "inject",
        "z": "920228e3.9f3908",
        "name": "Execute UIaaS Request Night",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 19 * * *",
        "once": false,
        "x": 180,
        "y": 260,
        "wires": [
            [
                "dac634a.683c6c8",
                "26f4bffe.877578"
            ]
        ]
    },
    {
        "id": "26f4bffe.877578",
        "type": "function",
        "z": "920228e3.9f3908",
        "name": "move and zoom",
        "func": "msg.payload = { command:{layer:\"Nat Geo\",lat:45.763484 ,lon:4.851277 ,zoom:10} };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 418,
        "y": 335,
        "wires": [
            [
                "fe3269e3.8c6e3"
            ]
        ]
    },
    {
        "id": "24a08a34.9b1b0e",
        "type": "inject",
        "z": "920228e3.9f3908",
        "name": "Inject This First",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 127,
        "y": 336,
        "wires": [
            [
                "26f4bffe.877578"
            ]
        ]
    },
    {
        "id": "fe3269e3.8c6e3",
        "type": "worldmap",
        "z": "920228e3.9f3908",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "x": 641,
        "y": 334,
        "wires": []
    },
    {
        "id": "bdcb1f84.057df8",
        "type": "ui_text",
        "z": "920228e3.9f3908",
        "group": "e315b98.67035c8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "HeatWAveLog",
        "label": "Heat Wave Situation",
        "format": "{{msg.heatwaveLog}}",
        "layout": "row-left",
        "x": 1460.5,
        "y": 377,
        "wires": []
    },
    {
        "id": "49a80c3a.c4fb84",
        "type": "python3-function",
        "z": "920228e3.9f3908",
        "name": "Warning Preprocessor",
        "func": "from datetime import datetime, timedelta\n\nN1 = 1\nN2 = 2\n\ndate_N1_days_ago = datetime.now() - timedelta(days=N1)\ndate_N2_days_ago = datetime.now() - timedelta(days=N2)\ndate_today = datetime.now()\n\nd1 = datetime.now().strftime(\"%Y-%m-%d \");\nd2 = (datetime.now() - timedelta(days=N1)).strftime(\"%Y-%m-%d \");\nd3 = (datetime.now() - timedelta(days=N2)).strftime(\"%Y-%m-%d \");\n\nfor items in msg[\"payload\"] :\n    node.log(items);\n    \n\nnode.log(date_N1_days_ago.strftime(\"%Y-%m-%d %H:%M:%S\"));\nnode.log(date_N2_days_ago.strftime(\"%Y-%m-%d %H:%M:%S\"));\n\n#msg[\"payload\"] = \"Currently there is no heatwave danger!\"\nmsg[\"heatwaveLog\"] = \"Currently there is no heatwave danger!\"\n\nreturn msg",
        "outputs": 1,
        "x": 1080.5,
        "y": 381,
        "wires": [
            [
                "bdcb1f84.057df8",
                "1332d92f.ca442f"
            ]
        ]
    },
    {
        "id": "cfc39b1e.a410f",
        "type": "debug",
        "z": "920228e3.9f3908",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 782,
        "y": 138,
        "wires": []
    },
    {
        "id": "23f3d1b9.826816",
        "type": "python3-function",
        "z": "920228e3.9f3908",
        "name": "Store on MongoDB",
        "func": "# from modules.library import clean_netatmo_data2\nimport pymongo\nfrom pymongo import MongoClient\nfrom modules.library import insert_mongo\n\ndata = msg['payload']\nhost = 'mongodb'\ndb = 'myDB'\ncollection = 'biotope'\nres = insert_mongo(db, collection, data, host)\n\nreturn msg  ",
        "outputs": 1,
        "x": 1163,
        "y": 92,
        "wires": [
            [
                "13b0cb41.4f805d"
            ]
        ]
    },
    {
        "id": "3ba5c3b7.cc501c",
        "type": "python3-function",
        "z": "920228e3.9f3908",
        "name": "ReadFromMongo",
        "func": "import pymongo\nfrom pymongo import MongoClient\nfrom modules.library import read_mongo\nimport pandas as pd\n\ndata = msg['payload']\nhost = 'mongodb'\ndb = 'myDB'\ncollection = 'biotope'\nquery={}\nres = read_mongo(db, collection, query , host)\n\nabc = res.to_json(orient='records')\ncol = res.to_json(orient='columns')\n\nmsg['payload'] = abc\nreturn msg",
        "outputs": 1,
        "x": 835.5,
        "y": 378,
        "wires": [
            [
                "91fd7a1e.22198"
            ]
        ]
    },
    {
        "id": "1332d92f.ca442f",
        "type": "debug",
        "z": "920228e3.9f3908",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1100,
        "y": 538,
        "wires": []
    },
    {
        "id": "91fd7a1e.22198",
        "type": "json",
        "z": "920228e3.9f3908",
        "name": "",
        "x": 795.5,
        "y": 439,
        "wires": [
            [
                "1332d92f.ca442f",
                "49a80c3a.c4fb84"
            ]
        ]
    },
    {
        "id": "e315b98.67035c8",
        "type": "ui_group",
        "z": "",
        "name": "Marked Temperature Sensors in Lyonw",
        "tab": "e9d5159d.cb9e7",
        "disp": true,
        "width": "40",
        "collapse": false
    },
    {
        "id": "e9d5159d.cb9e7",
        "type": "ui_tab",
        "z": "",
        "name": "Lyon Heat Wave Mitigation",
        "icon": "dashboard"
    }
]
