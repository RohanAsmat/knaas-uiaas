[{"id":"eecfb99a.fd3c78","type":"tab","label":"4_UIaaS_PFLyon_Interaction"},{"id":"3b6ce6ef.a547da","type":"inject","z":"eecfb99a.fd3c78","name":"Execute UIaaS Request","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":169,"y":290,"wires":[["fa2ed126.b56488"]]},{"id":"fa2ed126.b56488","type":"omiNodeV9","z":"eecfb99a.fd3c78","name":"Read O-MI Node Lyon Parking Facillities","path_InfoItem":"http://veivi.parkkis.com:8080/Objects/ParkingService/ParkingFacilities","token":"","operations":"Read","ttl":"","interval":"","callback":"","newest":"","oldest":"","begin":"","end":"","value":"","reqID":"","metadata":true,"readTypes":"read1time","x":485,"y":289,"wires":[["95bee5bf.3c03d"]]},{"id":"35754dbf.6908da","type":"debug","z":"eecfb99a.fd3c78","name":"OutputOMINodeLyon","active":true,"console":"false","complete":"payload","x":1133,"y":304,"wires":[]},{"id":"95bee5bf.3c03d","type":"xml","z":"eecfb99a.fd3c78","name":"Lyon O-DF Structure to JSON","attr":"","chr":"","x":830,"y":201,"wires":[["3ed22198.df302e"]]},{"id":"3ed22198.df302e","type":"python3-function","z":"eecfb99a.fd3c78","name":"Extract Response O-MI Node","func":"#taking response value \n#Note in response first is longitude --> 0 and latitude -->1\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\n\nlstForGeo = []\nlstForAvailability = []\nlstForOpeningHours = []\npointOfInterest = []\npointOfPark = []\npSpaces = []\nparsedGeoAndCorrespondingAvailability = []\nlstForParkingName = []\n\nif response == \"200\":\n    node.log(\"Extract Response O-MI Node: Success in reading O-MI Node Contents\")\n    \n    #getting the array of Objects with the Parking Facilities Data from Lyon\n    lyonParkikisInfoItem = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0]\n    lyonParkikisObjectID = lyonParkikisInfoItem[\"id\"][0]\n    lyonParkikisArrayofItems = lyonParkikisInfoItem[\"Object\"][0][\"Object\"]\n    \n    #Storing the result of three different types of Objects in three different lists, hence the indexes of the list items \n    #correspond to a unanimous rootID\n    for object in lyonParkikisArrayofItems:\n        parsedFacility = object[\"Object\"]\n        lstForParkingName.append(object[\"id\"][0])\n        for data in parsedFacility:\n            if data[\"id\"][0] == \"geo\":\n             lstForGeo.append(data['InfoItem'])\n            elif data[\"id\"][0] == \"ParkingSpaces\":\n             lstForAvailability.append(data[\"Object\"]) \n            else:\n             lstForOpeningHours = data\n             \n   #points for coordinates geo location\n    for geo in lstForGeo:\n        longitude = 0.0\n        latitude = 0.0\n        for coords in geo:\n            if coords[\"$\"][\"name\"] == \"longitude\":\n             longitude = coords[\"value\"][0][\"_\"]\n            else:\n             latitude = coords[\"value\"][0][\"_\"]\n            \n        pointOfInterest.append([ float(longitude), float(latitude) ]) \n    \n    #relative points of Parking Availabilities\n    number = 0\n    for ParkingSpaces in lstForAvailability:\n        parkID = \"000\"\n        parkAvailability = \"false\"\n        pointOfPark.append([])\n        for parkPlatz in ParkingSpaces:\n            parkID = parkPlatz[\"id\"][0]\n            parkAvailability = parkPlatz[\"InfoItem\"][0][\"value\"][0][\"_\"]\n            pointOfPark[number].append([ parkID , parkAvailability ])\n        number = number + 1\n    \n    #parsedGeoAndCorrespondingAvailability\n    iterator = 0\n    for items in pointOfInterest:\n        parsedGeoAndCorrespondingAvailability.append([{'geo': items },{'name': lstForParkingName[iterator]},{'ParkingSpaces': pointOfPark[iterator]}])\n        iterator = iterator + 1\n\nelse:\n    node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents\")\n\nmsg[\"payload\"] = parsedGeoAndCorrespondingAvailability;\n\nreturn msg","outputs":1,"x":815,"y":365,"wires":[["463d991a.6e2b4","35754dbf.6908da"]]},{"id":"463d991a.6e2b4","type":"python3-function","z":"eecfb99a.fd3c78","name":"Processing Map Data","func":"#Data processing to send for plotting on worldMap\ndataToDisplay = []\n\n# msg.payload.layer = \"earthquake\";\n# msg.payload.name = msg.payload.id;\n# msg.payload.icon = \"globe\";\n# msg.payload.iconColor = \"orange\";\n\niterator = 0\nfor items in msg[\"payload\"]:\n    longitude=items[0][\"geo\"][0]\n    latitude=items[0][\"geo\"][1]\n    name = items[1][\"name\"]\n    iconColor=\"red\"\n    \n    dataToDisplay.append({\"lon\": longitude, \"lat\": latitude, \"layer\": \"ParkingSpaces\", \"name\":name, \"icon\":\"car\", \"iconColor\":iconColor})\n\n    for spaces in items[2][\"ParkingSpaces\"]:\n        spaceName = spaces[0]\n        dataToDisplay[iterator][spaceName] = spaces[1]\n        availabilty = spaces[1]\n        if availabilty == \"true\":\n            iconColor = \"green\"\n            dataToDisplay[iterator][\"iconColor\"] = iconColor\n\n    iterator = iterator+1\nmsg[\"payload\"] = dataToDisplay\nreturn msg","outputs":1,"x":1054.5,"y":449,"wires":[["bb72d267.dfa368"]]},{"id":"bb72d267.dfa368","type":"worldmap","z":"eecfb99a.fd3c78","name":"","lat":"","lon":"","zoom":"","layer":"","cluster":"","maxage":"","usermenu":"show","layers":"show","panit":"false","x":1170.5,"y":565,"wires":[]},{"id":"ff58eaca.88548","type":"function","z":"eecfb99a.fd3c78","name":"move and zoom","func":"msg.payload = { command:{layer:\"Esri Terrain\",lat:0,lon:0,zoom:3} };\nreturn msg;","outputs":1,"noerr":0,"x":916,"y":568,"wires":[["bb72d267.dfa368"]]},{"id":"d784f35.160779","type":"inject","z":"eecfb99a.fd3c78","name":"Inject This First","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":false,"x":705,"y":569,"wires":[["ff58eaca.88548"]]}]
