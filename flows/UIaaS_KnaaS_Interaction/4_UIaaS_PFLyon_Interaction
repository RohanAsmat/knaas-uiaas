[
    {
        "id": "a94af715.dffc18",
        "type": "tab",
        "label": "4_UIaaS_PFLyon_Interaction"
    },
    {
        "id": "e7293156.3404f",
        "type": "inject",
        "z": "a94af715.dffc18",
        "name": "Execute UIaaS Request",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 169,
        "y": 290,
        "wires": [
            [
                "c443f06a.e74e",
                "9c81129c.ad9e1"
            ]
        ]
    },
    {
        "id": "9c81129c.ad9e1",
        "type": "omiNodeV9",
        "z": "a94af715.dffc18",
        "name": "Read O-MI Node Lyon Parking Facillities",
        "path_InfoItem": "http://veivi.parkkis.com:8080/Objects",
        "token": "",
        "operations": "Read",
        "ttl": "80",
        "interval": "",
        "callback": "",
        "newest": "",
        "oldest": "",
        "begin": "",
        "end": "",
        "value": "",
        "reqID": "",
        "metadata": true,
        "readTypes": "read1time",
        "x": 485,
        "y": 289,
        "wires": [
            [
                "d8822360.351178"
            ]
        ]
    },
    {
        "id": "4054ae52.2f8ab",
        "type": "debug",
        "z": "a94af715.dffc18",
        "name": "OutputOMINodeLyon",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1144,
        "y": 269,
        "wires": []
    },
    {
        "id": "d8822360.351178",
        "type": "xml",
        "z": "a94af715.dffc18",
        "name": "Lyon O-DF Structure to JSON",
        "attr": "",
        "chr": "",
        "x": 838,
        "y": 208,
        "wires": [
            [
                "bf2545de.6f26e"
            ]
        ]
    },
    {
        "id": "bf2545de.6f26e",
        "type": "python3-function",
        "z": "a94af715.dffc18",
        "name": "Extract Response O-MI Node Lyon",
        "func": "#taking response value \n#Note in response first is longitude --> 0 and latitude -->1\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\n\nlstForGeo = []\nlstForAvailability = []\nlstForOpeningHours = []\npointOfInterest = []\npointOfPark = []\npSpaces = []\nparsedGeoAndCorrespondingAvailability = []\nlstForParkingName = []\n\nif response == \"200\":\n node.log(\"Extract Response O-MI Node: Success in reading O-MI Node Contents\")\n \n #getting the array of Objects with the Parking Facilities Data from Lyon\n lyonParkikisInfoItemArray = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"]\n \n for items in lyonParkikisInfoItemArray:\n     if items[\"id\"][0] == \"ParkingService\":\n         lyonParkikisInfoItem = items\n \n lyonParkikisObjectID = lyonParkikisInfoItem[\"id\"][0]\n lyonParkikisArrayofItems = lyonParkikisInfoItem[\"Object\"][0][\"Object\"]\n \n #Storing the result of three different types of Objects in three different lists, hence the indexes of the list items \n #correspond to a unanimous rootID\n for object in lyonParkikisArrayofItems:\n    parsedFacility = object[\"Object\"]\n    lstForParkingName.append(object[\"id\"][0])\n    for data in parsedFacility:\n        if data[\"id\"][0] == \"geo\":\n            lstForGeo.append(data['InfoItem'])\n        elif data[\"id\"][0] == \"ParkingSpaces\":\n            lstForAvailability.append(data[\"Object\"]) \n        else:\n            lstForOpeningHours = data\n \n #points for coordinates geo location\n for geo in lstForGeo:\n    longitude = 0.0\n    latitude = 0.0\n    for coords in geo:\n        if coords[\"$\"][\"name\"] == \"longitude\":\n            longitude = coords[\"value\"][0][\"_\"]\n        else:\n            latitude = coords[\"value\"][0][\"_\"]\n \n    pointOfInterest.append([ float(longitude), float(latitude) ]) \n \n #relative points of Parking Availabilities\n number = 0\n for ParkingSpaces in lstForAvailability:\n    parkID = \"000\"\n    parkAvailability = \"false\"\n    pointOfPark.append([])\n    for parkPlatz in ParkingSpaces:\n        parkID = parkPlatz[\"id\"][0]\n        parkAvailability = parkPlatz[\"InfoItem\"][0][\"value\"][0][\"_\"]\n        pointOfPark[number].append([ parkID , parkAvailability ])\n    number = number + 1\n \n #parsedGeoAndCorrespondingAvailability\n iterator = 0\n for items in pointOfInterest:\n    parsedGeoAndCorrespondingAvailability.append([{'geo': items },{'name': lstForParkingName[iterator]},{'ParkingSpaces': pointOfPark[iterator]}])\n    iterator = iterator + 1\n\nelse:\n node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents\")\n\nmsg[\"payload\"] = parsedGeoAndCorrespondingAvailability;\n# msg[\"payload\"] = lyonParkikisInfoItem ;\nmsg[\"geoOnly\"] = pointOfInterest;\n\nreturn msg",
        "outputs": 1,
        "x": 849,
        "y": 311,
        "wires": [
            [
                "4054ae52.2f8ab",
                "b6dcf0dc.57b18"
            ]
        ]
    },
    {
        "id": "b6dcf0dc.57b18",
        "type": "python3-function",
        "z": "a94af715.dffc18",
        "name": "PreProcessing Map Data Lyon",
        "func": "#Data processing to send for plotting on worldMap\ndataToDisplay = []\n\niterator = 0\nfor items in msg[\"payload\"]:\n longitude=items[0][\"geo\"][0]\n latitude=items[0][\"geo\"][1]\n name = items[1][\"name\"]\n iconColor=\"red\"\n \n dataToDisplay.append({\"lon\": longitude, \"lat\": latitude, \"layer\": \"ParkingSpaces\", \"name\":name, \"icon\":\"car\", \"iconColor\":iconColor})\n\n for spaces in items[2][\"ParkingSpaces\"]:\n    spaceName = spaces[0]\n    dataToDisplay[iterator][spaceName] = spaces[1]\n    availabilty = spaces[1]\n    if availabilty == \"true\":\n        iconColor = \"green\"\n        dataToDisplay[iterator][\"iconColor\"] = iconColor\n\n iterator = iterator+1\nmsg[\"payload\"] = dataToDisplay\nreturn msg",
        "outputs": 1,
        "x": 1172.5,
        "y": 206,
        "wires": [
            [
                "e8c7b8e.106f8c8"
            ]
        ]
    },
    {
        "id": "e8c7b8e.106f8c8",
        "type": "worldmap",
        "z": "a94af715.dffc18",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "x": 1414.5,
        "y": 387,
        "wires": []
    },
    {
        "id": "c249444e.875688",
        "type": "function",
        "z": "a94af715.dffc18",
        "name": "move and zoom",
        "func": "msg.payload = { command:{layer:\"Esri Terrain\",lat:61.0,lon:23.0,zoom:3} };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1195,
        "y": 386,
        "wires": [
            [
                "e8c7b8e.106f8c8"
            ]
        ]
    },
    {
        "id": "6d27a54f.b3ef64",
        "type": "inject",
        "z": "a94af715.dffc18",
        "name": "Inject This First",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 984,
        "y": 387,
        "wires": [
            [
                "c249444e.875688"
            ]
        ]
    },
    {
        "id": "c443f06a.e74e",
        "type": "omiNodeV9",
        "z": "a94af715.dffc18",
        "name": "Read O-MI Node Helsinki Parking Facillities",
        "path_InfoItem": "http://biotope.cs.hut.fi/omi/node/",
        "token": "",
        "operations": "Read",
        "ttl": "",
        "interval": "",
        "callback": "",
        "newest": "",
        "oldest": "",
        "begin": "",
        "end": "",
        "value": "",
        "reqID": "",
        "metadata": true,
        "readTypes": "read1time",
        "x": 458,
        "y": 500,
        "wires": [
            [
                "bfff5cce.675be"
            ]
        ]
    },
    {
        "id": "bfff5cce.675be",
        "type": "xml",
        "z": "a94af715.dffc18",
        "name": "Helsinki O-DF Structure to JSON",
        "attr": "",
        "chr": "",
        "x": 799,
        "y": 453,
        "wires": [
            [
                "45d809f5.21efa8"
            ]
        ]
    },
    {
        "id": "45d809f5.21efa8",
        "type": "python3-function",
        "z": "a94af715.dffc18",
        "name": "Extract Response O-MI Node Helsinki",
        "func": "#taking response value \n#Note in response first is longitude --> 0 and latitude -->1\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\n\nnodeName = \"Helsinki\"\nlstForGeo = []\nlstForAvailability = []\nlstForOpeningHours = []\nlstForCapacities = []\npointOfInterest = []\npointOfPark = []\npSpaces = []\nparsedGeoAndCorrespondingAvailability = []\nlstForParkingName = []\n\nif response == \"200\":\n    node.log(\"Extract Response O-MI Node: Success in reading O-MI Node Contents\")\n \n    #getting the array of Objects with the Parking Facilities Data from Lyon\n    helsinkiParkikisInfoItem = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"]\n    \n    #Iterating the list for the Object with Parking Facilities\n    for omiObject in helsinkiParkikisInfoItem:\n        if omiObject[\"id\"][0] == \"ParkingService\":\n            helsinkiParkikisInfoItemList = omiObject\n    \n    helsinkiParkikisObjectID = helsinkiParkikisInfoItemList[\"id\"][0] + \" : \" + nodeName\n    helsinkiParkikisArrayofItems = helsinkiParkikisInfoItemList[\"Object\"][0][\"Object\"]\n \n    #Storing the result of three different types of Objects in three different lists, hence the indexes of the list items \n    #correspond to a unanimous rootID\n    for object in helsinkiParkikisArrayofItems:\n        parsedFacility = object[\"Object\"]\n        lstForParkingName.append(object[\"id\"][0])\n        \n        geoBool = False\n        ParkingSpacesBool = False\n        openingHoursSpecificationBool = False\n        capacitiesBool = False\n        \n        #storing the object values in the respective arrays..\n        for data in parsedFacility:\n            tempId = data[\"id\"][0]\n            \n            if tempId == \"geo\":\n                lstForGeo.append({\"res\":data[\"InfoItem\"], \"err\":\"False\"})\n                geoBool = True\n            elif tempId == \"ParkingSpaces\":\n                lstForAvailability.append({\"res\":data[\"Object\"], \"err\":\"False\"})\n                ParkingSpacesBool = True\n            elif (tempId == \"openingHoursSpecification\") or (tempId == \"openingHoursSpecifications\"):\n                lstForOpeningHours.append({\"res\":data, \"err\":\"False\"})\n                openingHoursSpecificationBool = True\n            elif tempId == \"Capacities\":\n                lstForCapacities.append({\"res\":data[\"Object\"], \"err\":\"False\"})\n                capacitiesBool = True\n        \n        if geoBool == False:\n            lstForGeo.append({\"res\":\"geo\", \"err\":\"True\"})\n        elif ParkingSpacesBool == False:\n            lstForAvailability.append({\"res\":\"ParkingSpaces\", \"err\":\"True\"})\n        elif openingHoursSpecificationBool == False:\n            lstForOpeningHours.append({\"res\":\"openingHoursSpecification\", \"err\":\"True\"})\n        elif capacitiesBool == False:\n            lstForCapacities.append({\"res\":\"capacity\", \"err\":\"True\"})\n        \n        geoBool = False\n        ParkingSpacesBool = False\n        openingHoursSpecificationBool = False\n        capacitiesBool = False\n        \n    #points for geo coordinates\n    for data in lstForGeo:\n        if data[\"err\"] == \"False\":\n            longitude = 0.0\n            latitude = 0.0\n            for points in data[\"res\"]:\n                if points[\"$\"][\"name\"] == \"longitude\":\n                    longitude = points[\"value\"][0][\"_\"]\n                elif points[\"$\"][\"name\"] == \"latitude\":\n                    latitude = points[\"value\"][0][\"_\"]\n            pointOfInterest.append({\"coordinates\":[float(longitude),float(latitude)], \"err\":\"False\"})\n        elif data[\"err\"] == \"True\":\n            pointOfInterest.append({\"coordinates\":[float(longitude),float(latitude)], \"err\":\"True\"})\n    \n    #parking spaces for the corresponding coordinates\n    number = 0\n    for data in lstForAvailability:\n        pointOfPark.append({\"spaces\":[], \"err\":\"False\"})\n        parkID = 0\n        parkAvailability = False\n        if data[\"err\"] == \"False\":\n            for objects in data[\"res\"]:\n                parkID = objects[\"id\"][0]\n                for pois in objects[\"InfoItem\"]:\n                    if pois[\"$\"][\"name\"] == \"available\":\n                        parkAvailability = pois[\"value\"][0][\"_\"]\n                pointOfPark[number][\"spaces\"].append([parkID, parkAvailability])\n        elif data[\"err\"] == \"True\":\n            pointOfPark[\"err\"] = True\n        number = number + 1\n    \n    #clean pois in parsedGeoAndCorrespondingAvailability for preprocessor to map\n    iterator = 0\n    for items in pointOfInterest:\n        if items[\"err\"] == \"False\" and pointOfPark[iterator][\"err\"] == \"False\":\n            parsedGeoAndCorrespondingAvailability.append({\"geo\": items[\"coordinates\"], \"name\":lstForParkingName[iterator], \"parkingSpaces\":pointOfPark[iterator][\"spaces\"]})\n        iterator = iterator + 1\nelse:\n    node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents\")\n\nmsg[\"payload\"] = parsedGeoAndCorrespondingAvailability ;\nmsg[\"geoOnly\"] = pointOfInterest;\n#msg[\"payload\"] = helsinkiParkikisInfoItemList;\n\nreturn msg",
        "outputs": 1,
        "x": 804,
        "y": 560,
        "wires": [
            [
                "af9f7f65.be358",
                "1c76d4ad.c64223"
            ]
        ]
    },
    {
        "id": "1c76d4ad.c64223",
        "type": "python3-function",
        "z": "a94af715.dffc18",
        "name": "PreProcessing Map Data Helsinki",
        "func": "#Data processing to send for plotting on worldMap\ndataToDisplay = []\n\niterator = 0\nfor items in msg[\"payload\"]:\n    longitude=items[\"geo\"][0]\n    latitude=items[\"geo\"][1]\n    name = items[\"name\"]\n    iconColor=\"red\"\n \n    dataToDisplay.append({\"lon\": longitude, \"lat\": latitude, \"layer\": \"ParkingSpaces\", \"name\":name, \"icon\":\"fa-truck\", \"iconColor\":iconColor})\n\n    for spaces in items[\"parkingSpaces\"]:\n        spaceName = spaces[0]\n        dataToDisplay[iterator][spaceName] = spaces[1]\n        availabilty = spaces[1]\n        if availabilty == \"true\":\n            iconColor = \"green\"\n            dataToDisplay[iterator][\"iconColor\"] = iconColor\n\n    iterator = iterator+1\n    \nmsg[\"payload\"] = dataToDisplay\nreturn msg",
        "outputs": 1,
        "x": 1149,
        "y": 456,
        "wires": [
            [
                "e8c7b8e.106f8c8"
            ]
        ]
    },
    {
        "id": "af9f7f65.be358",
        "type": "debug",
        "z": "a94af715.dffc18",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1080,
        "y": 560,
        "wires": []
    },
    {
        "id": "bedad353.948be8",
        "type": "ui_template",
        "z": "a94af715.dffc18",
        "group": "3fc1a956.866ade",
        "name": "Map",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<iframe src=\"http://127.0.0.1:1880/worldmap/\" height=\"658\" width=\"1482\">\n <p>Your browser does not support iframes.</p>\n</iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1409.5,
        "y": 453,
        "wires": [
            []
        ]
    },
    {
        "id": "fac82d7b.f393a8",
        "type": "comment",
        "z": "a94af715.dffc18",
        "name": "O-Mi Node data for parking facilities from Node 1",
        "info": "",
        "x": 466.5,
        "y": 253,
        "wires": []
    },
    {
        "id": "e483ccbc.3b4848",
        "type": "comment",
        "z": "a94af715.dffc18",
        "name": "O-Mi Node data for parking facilities from Node 2",
        "info": "",
        "x": 449,
        "y": 462,
        "wires": []
    },
    {
        "id": "3fc1a956.866ade",
        "type": "ui_group",
        "z": "",
        "name": "Parking Facilities and Charging Facilities on A WorldMap",
        "tab": "d512c81.5bfdfb8",
        "disp": true,
        "width": "32",
        "collapse": false
    },
    {
        "id": "d512c81.5bfdfb8",
        "type": "ui_tab",
        "z": "",
        "name": "Smart Mobility Dashboard",
        "icon": "dashboard",
        "order": 4
    }
]
